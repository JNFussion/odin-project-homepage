
$gap-sizes: ("1": .5em, "2": .75em, "3": 1em, "4": 1.5em, "5": 2em);
$alignment-justification-positions: (start, end, center, space-evenly, space-around, space-between);

/* LAYOUT */


.grid {
  display: grid;
}

.grid-12,
.row {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
}

@media (min-width: 480px) {
  .grid-12,
  .row { max-width: 420px;}
}

@media (min-width: 760px) {
  .grid-12,
  .row { max-width: 720px;}
}

@media (min-width: 1020px) {
  .grid-12,
  .row { max-width: 1200px;}
}

/* Base class for sizing and positioning the child elements.
  First number is for the position and second number for how many columns take up */

@mixin column-position($position) {
    .column-#{$position} { grid-column: $position; }
}

@mixin span($span) {
  .span-#{$span}{
    grid-column: span $span;
  }
}

@mixin column-position-span($position, $span) {
  .column-#{$position}-#{$span}{
    grid-column: $position / span $span;
  }
}

@for $i from 1 through 12 {
  @include column-position($i);
  @include span($i);

  @for $j from 1 through 12 {
    @include column-position-span($i, $j)
  }
}

/* SIZING GAP */

@mixin gap($number, $gap-size) {
  .gap-#{$number} { gap: $gap-size; }
}

@each $key, $value in  $gap-sizes{
  @include gap($key, $value);
}

/* ALIGNING AND JUSTIFYING */


@mixin alignment-justification($pos) {

  .a-items-#{$pos} { align-items: $pos; }
  .j-items-#{$pos} { justify-items: $pos; }
  .a-content-#{$pos} { align-content: $pos; }
  .j-content-#{$pos} { justify-content: $pos; }
  .a-self-#{$pos} { align-self: $pos; }
  .j-self-#{$pos} { justify-self: $pos; }
}

.content-centered {
  justify-content: center;
  align-content: center;
}

@each $value in  $alignment-justification-positions {
  @include alignment-justification($value);
}

.flex {
  display: flex;
}

.flex-column {
  display: flex;
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

@for $value from 1 to 4 {
  .flex-#{$value} {
    flex: $value;
  }
}